"use strict";!function(_){_.attrFn=_.attrFn||{};var e="ontouchstart"in window,T={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,shake_threshold:15,touch_capable:e,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:e?"touchstart":"mousedown",endevent:e?"touchend":"mouseup",moveevent:e?"touchmove":"mousemove",tapevent:e?"tap":"click",scrollevent:e?"touchmove":"scroll",hold_timer:null,tap_timer:null};_.touch={},_.isTouchCapable=function(){return T.touch_capable},_.getStartEvent=function(){return T.startevent},_.getEndEvent=function(){return T.endevent},_.getMoveEvent=function(){return T.moveevent},_.getTapEvent=function(){return T.tapevent},_.getScrollEvent=function(){return T.scrollevent},_.touch.setSwipeThresholdX=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");T.swipe_h_threshold=e},_.touch.setSwipeThresholdY=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");T.swipe_v_threshold=e},_.touch.setDoubleTapInt=function(e){if("number"!=typeof e)throw new Error("Interval parameter must be a type of number");T.doubletap_int=e},_.touch.setTapHoldThreshold=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");T.taphold_threshold=e},_.touch.setTapRange=function(e){if("number"!=typeof e)throw new Error("Ranger parameter must be a type of number");T.tap_pixel_range=threshold},_.each(["tapstart","tapend","tapmove","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange","tap2","taphold2"],function(e,t){_.fn[t]=function(e){return e?this.on(t,e):this.trigger(t)},_.attrFn[t]=!0}),_.event.special.tapstart={setup:function(){var n=this,i=_(n);i.on(T.startevent,function e(t){if(i.data("callee",e),t.which&&1!==t.which)return!1;var a=t.originalEvent,o={position:{x:T.touch_capable?a.touches[0].pageX:t.pageX,y:T.touch_capable?a.touches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(a.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(t.pageX-(i.offset()?i.offset().left:0)),y:T.touch_capable?Math.round(a.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(t.pageY-(i.offset()?i.offset().top:0))},time:Date.now(),target:t.target};return m(n,"tapstart",t,o),!0})},remove:function(){_(this).off(T.startevent,_(this).data.callee)}},_.event.special.tapmove={setup:function(){var n=this,i=_(n);i.on(T.moveevent,function e(t){i.data("callee",e);var a=t.originalEvent,o={position:{x:T.touch_capable?a.touches[0].pageX:t.pageX,y:T.touch_capable?a.touches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(a.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(t.pageX-(i.offset()?i.offset().left:0)),y:T.touch_capable?Math.round(a.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(t.pageY-(i.offset()?i.offset().top:0))},time:Date.now(),target:t.target};return m(n,"tapmove",t,o),!0})},remove:function(){_(this).off(T.moveevent,_(this).data.callee)}},_.event.special.tapend={setup:function(){var n=this,i=_(n);i.on(T.endevent,function e(t){i.data("callee",e);var a=t.originalEvent,o={position:{x:T.touch_capable?a.changedTouches[0].pageX:t.pageX,y:T.touch_capable?a.changedTouches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(a.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(t.pageX-(i.offset()?i.offset().left:0)),y:T.touch_capable?Math.round(a.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(t.pageY-(i.offset()?i.offset().top:0))},time:Date.now(),target:t.target};return m(n,"tapend",t,o),!0})},remove:function(){_(this).off(T.endevent,_(this).data.callee)}},_.event.special.taphold={setup:function(){var l,f=this,g=_(f),d={x:0,y:0},v=0,w=0;g.on(T.startevent,function p(h){if(h.which&&1!==h.which)return!1;g.data("tapheld",!1),l=h.target;var c=h.originalEvent,u=Date.now();T.touch_capable?c.touches[0].pageX:h.pageX,T.touch_capable?c.touches[0].pageY:h.pageY,T.touch_capable?(c.touches[0].pageX,c.touches[0].target.offsetLeft):h.offsetX,T.touch_capable?(c.touches[0].pageY,c.touches[0].target.offsetTop):h.offsetY;d.x=h.originalEvent.targetTouches?h.originalEvent.targetTouches[0].pageX:h.pageX,d.y=h.originalEvent.targetTouches?h.originalEvent.targetTouches[0].pageY:h.pageY,v=d.x,w=d.y;var e=g.parent().data("threshold")?g.parent().data("threshold"):g.data("threshold"),t=void 0!==e&&!1!==e&&parseInt(e)?parseInt(e):T.taphold_threshold;return T.hold_timer=window.setTimeout(function(){var e=d.x-v,t=d.y-w;if(h.target==l&&(d.x==v&&d.y==w||e>=-T.tap_pixel_range&&e<=T.tap_pixel_range&&t>=-T.tap_pixel_range&&t<=T.tap_pixel_range)){g.data("tapheld",!0);for(var a=Date.now()-u,o=h.originalEvent.targetTouches?h.originalEvent.targetTouches:[h],n=[],i=0;i<o.length;i++){var r={position:{x:T.touch_capable?c.changedTouches[i].pageX:h.pageX,y:T.touch_capable?c.changedTouches[i].pageY:h.pageY},offset:{x:T.touch_capable?Math.round(c.changedTouches[i].pageX-(g.offset()?g.offset().left:0)):Math.round(h.pageX-(g.offset()?g.offset().left:0)),y:T.touch_capable?Math.round(c.changedTouches[i].pageY-(g.offset()?g.offset().top:0)):Math.round(h.pageY-(g.offset()?g.offset().top:0))},time:Date.now(),target:h.target,duration:a};n.push(r)}var s=2==o.length?"taphold2":"taphold";g.data("callee1",p),m(f,s,h,n)}},t),!0}).on(T.endevent,function e(){g.data("callee2",e),g.data("tapheld",!1),window.clearTimeout(T.hold_timer)}).on(T.moveevent,function e(t){g.data("callee3",e),v=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,w=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY})},remove:function(){_(this).off(T.startevent,_(this).data.callee1).off(T.endevent,_(this).data.callee2).off(T.moveevent,_(this).data.callee3)}},_.event.special.doubletap={setup:function(){var r,s,p=this,h=_(p),c=null,u=!1;h.on(T.startevent,function e(t){return(!t.which||1===t.which)&&(h.data("doubletapped",!1),t.target,h.data("callee1",e),s=t.originalEvent,c||(c={position:{x:T.touch_capable?s.touches[0].pageX:t.pageX,y:T.touch_capable?s.touches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(s.changedTouches[0].pageX-(h.offset()?h.offset().left:0)):Math.round(t.pageX-(h.offset()?h.offset().left:0)),y:T.touch_capable?Math.round(s.changedTouches[0].pageY-(h.offset()?h.offset().top:0)):Math.round(t.pageY-(h.offset()?h.offset().top:0))},time:Date.now(),target:t.target,element:t.originalEvent.srcElement,index:_(t.target).index()}),!0)}).on(T.endevent,function e(t){var a=Date.now(),o=a-(h.data("lastTouch")||a+1);if(window.clearTimeout(r),h.data("callee2",e),o<T.doubletap_int&&_(t.target).index()==c.index&&100<o){h.data("doubletapped",!0),window.clearTimeout(T.tap_timer);var n={position:{x:T.touch_capable?t.originalEvent.changedTouches[0].pageX:t.pageX,y:T.touch_capable?t.originalEvent.changedTouches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(s.changedTouches[0].pageX-(h.offset()?h.offset().left:0)):Math.round(t.pageX-(h.offset()?h.offset().left:0)),y:T.touch_capable?Math.round(s.changedTouches[0].pageY-(h.offset()?h.offset().top:0)):Math.round(t.pageY-(h.offset()?h.offset().top:0))},time:Date.now(),target:t.target,element:t.originalEvent.srcElement,index:_(t.target).index()},i={firstTap:c,secondTap:n,interval:n.time-c.time};u||(m(p,"doubletap",t,i),c=null),u=!0,window.setTimeout(function(){u=!1},T.doubletap_int)}else h.data("lastTouch",a),r=window.setTimeout(function(){c=null,window.clearTimeout(r)},T.doubletap_int,[t]);h.data("lastTouch",a)})},remove:function(){_(this).off(T.startevent,_(this).data.callee1).off(T.endevent,_(this).data.callee2)}},_.event.special.singletap={setup:function(){var s=this,p=_(s),a=null,h=null,c={x:0,y:0};p.on(T.startevent,function e(t){return(!t.which||1===t.which)&&(h=Date.now(),a=t.target,p.data("callee1",e),c.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,c.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY,!0)}).on(T.endevent,function e(n){if(p.data("callee2",e),n.target==a){var i=n.originalEvent.changedTouches?n.originalEvent.changedTouches[0].pageX:n.pageX,r=n.originalEvent.changedTouches?n.originalEvent.changedTouches[0].pageY:n.pageY;T.tap_timer=window.setTimeout(function(){var e=c.x-i,t=c.y-r;if(!p.data("doubletapped")&&!p.data("tapheld")&&(c.x==i&&c.y==r||e>=-T.tap_pixel_range&&e<=T.tap_pixel_range&&t>=-T.tap_pixel_range&&t<=T.tap_pixel_range)){var a=n.originalEvent,o={position:{x:T.touch_capable?a.changedTouches[0].pageX:n.pageX,y:T.touch_capable?a.changedTouches[0].pageY:n.pageY},offset:{x:T.touch_capable?Math.round(a.changedTouches[0].pageX-(p.offset()?p.offset().left:0)):Math.round(n.pageX-(p.offset()?p.offset().left:0)),y:T.touch_capable?Math.round(a.changedTouches[0].pageY-(p.offset()?p.offset().top:0)):Math.round(n.pageY-(p.offset()?p.offset().top:0))},time:Date.now(),target:n.target};o.time-h<T.taphold_threshold&&m(s,"singletap",n,o)}},T.doubletap_int)}})},remove:function(){_(this).off(T.startevent,_(this).data.callee1).off(T.endevent,_(this).data.callee2)}},_.event.special.tap={setup:function(){var u,l,f=this,g=_(f),d=!1,v=null,w={x:0,y:0};g.on(T.startevent,function e(t){return g.data("callee1",e),(!t.which||1===t.which)&&(d=!0,w.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,w.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY,u=Date.now(),v=t.target,l=t.originalEvent.targetTouches?t.originalEvent.targetTouches:[t],!0)}).on(T.endevent,function e(t){g.data("callee2",e);var a=t.originalEvent.targetTouches?t.originalEvent.changedTouches[0].pageX:t.pageX,o=t.originalEvent.targetTouches?t.originalEvent.changedTouches[0].pageY:t.pageY,n=w.x-a,i=w.y-o;if(v==t.target&&d&&Date.now()-u<T.taphold_threshold&&(w.x==a&&w.y==o||n>=-T.tap_pixel_range&&n<=T.tap_pixel_range&&i>=-T.tap_pixel_range&&i<=T.tap_pixel_range)){for(var r=t.originalEvent,s=[],p=0;p<l.length;p++){var h={position:{x:T.touch_capable?r.changedTouches[p].pageX:t.pageX,y:T.touch_capable?r.changedTouches[p].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(r.changedTouches[p].pageX-(g.offset()?g.offset().left:0)):Math.round(t.pageX-(g.offset()?g.offset().left:0)),y:T.touch_capable?Math.round(r.changedTouches[p].pageY-(g.offset()?g.offset().top:0)):Math.round(t.pageY-(g.offset()?g.offset().top:0))},time:Date.now(),target:t.target};s.push(h)}var c=2==l.length?"tap2":"tap";m(f,c,t,s)}})},remove:function(){_(this).off(T.startevent,_(this).data.callee1).off(T.endevent,_(this).data.callee2)}},_.event.special.swipe={setup:function(){var l,f=_(this),g=!1,d=!1,v={x:0,y:0},w={x:0,y:0};f.on(T.startevent,function e(t){(f=_(t.currentTarget)).data("callee1",e),v.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,v.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY,w.x=v.x,w.y=v.y,g=!0;var a=t.originalEvent;l={position:{x:T.touch_capable?a.touches[0].pageX:t.pageX,y:T.touch_capable?a.touches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(a.changedTouches[0].pageX-(f.offset()?f.offset().left:0)):Math.round(t.pageX-(f.offset()?f.offset().left:0)),y:T.touch_capable?Math.round(a.changedTouches[0].pageY-(f.offset()?f.offset().top:0)):Math.round(t.pageY-(f.offset()?f.offset().top:0))},time:Date.now(),target:t.target}}),f.on(T.moveevent,function e(t){var a;(f=_(t.currentTarget)).data("callee2",e),w.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,w.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY;var o=f.parent().data("xthreshold")?f.parent().data("xthreshold"):f.data("xthreshold"),n=f.parent().data("ythreshold")?f.parent().data("ythreshold"):f.data("ythreshold"),i=void 0!==o&&!1!==o&&parseInt(o)?parseInt(o):T.swipe_h_threshold,r=void 0!==n&&!1!==n&&parseInt(n)?parseInt(n):T.swipe_v_threshold;if(v.y>w.y&&v.y-w.y>r&&(a="swipeup"),v.x<w.x&&w.x-v.x>i&&(a="swiperight"),v.y<w.y&&w.y-v.y>r&&(a="swipedown"),v.x>w.x&&v.x-w.x>i&&(a="swipeleft"),null!=a&&g){v.x=0,v.y=0,w.x=0,w.y=0,g=!1;var s=t.originalEvent,p={position:{x:T.touch_capable?s.touches[0].pageX:t.pageX,y:T.touch_capable?s.touches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(s.changedTouches[0].pageX-(f.offset()?f.offset().left:0)):Math.round(t.pageX-(f.offset()?f.offset().left:0)),y:T.touch_capable?Math.round(s.changedTouches[0].pageY-(f.offset()?f.offset().top:0)):Math.round(t.pageY-(f.offset()?f.offset().top:0))},time:Date.now(),target:t.target},h=Math.abs(l.position.x-p.position.x),c=Math.abs(l.position.y-p.position.y),u={startEvnt:l,endEvnt:p,direction:a.replace("swipe",""),xAmount:h,yAmount:c,duration:p.time-l.time};d=!0,f.trigger("swipe",u).trigger(a,u)}}),f.on(T.endevent,function e(t){var a="";if((f=_(t.currentTarget)).data("callee3",e),d){var o=f.data("xthreshold"),n=f.data("ythreshold"),i=void 0!==o&&!1!==o&&parseInt(o)?parseInt(o):T.swipe_h_threshold,r=void 0!==n&&!1!==n&&parseInt(n)?parseInt(n):T.swipe_v_threshold,s=t.originalEvent,p={position:{x:T.touch_capable?s.changedTouches[0].pageX:t.pageX,y:T.touch_capable?s.changedTouches[0].pageY:t.pageY},offset:{x:T.touch_capable?Math.round(s.changedTouches[0].pageX-(f.offset()?f.offset().left:0)):Math.round(t.pageX-(f.offset()?f.offset().left:0)),y:T.touch_capable?Math.round(s.changedTouches[0].pageY-(f.offset()?f.offset().top:0)):Math.round(t.pageY-(f.offset()?f.offset().top:0))},time:Date.now(),target:t.target};l.position.y>p.position.y&&l.position.y-p.position.y>r&&(a="swipeup"),l.position.x<p.position.x&&p.position.x-l.position.x>i&&(a="swiperight"),l.position.y<p.position.y&&p.position.y-l.position.y>r&&(a="swipedown"),l.position.x>p.position.x&&l.position.x-p.position.x>i&&(a="swipeleft");var h=Math.abs(l.position.x-p.position.x),c=Math.abs(l.position.y-p.position.y),u={startEvnt:l,endEvnt:p,direction:a.replace("swipe",""),xAmount:h,yAmount:c,duration:p.time-l.time};f.trigger("swipeend",u)}d=g=!1})},remove:function(){_(this).off(T.startevent,_(this).data.callee1).off(T.moveevent,_(this).data.callee2).off(T.endevent,_(this).data.callee3)}},_.event.special.scrollstart={setup:function(){var a,o,n=this,i=_(n);function r(e,t){m(n,(a=t)?"scrollstart":"scrollend",e)}i.on(T.scrollevent,function e(t){i.data("callee",e),a||r(t,!0),clearTimeout(o),o=setTimeout(function(){r(t,!1)},50)})},remove:function(){_(this).off(T.scrollevent,_(this).data.callee)}};var a,t,o,n,i=_(window),r={0:!0,180:!0};if(T.orientation_support){var s=window.innerWidth||i.width(),p=window.innerHeight||i.height();o=p<s&&50<s-p,n=r[window.orientation],(o&&n||!o&&!n)&&(r={"-90":!0,90:!0})}function h(){var e=a();e!==t&&(t=e,i.trigger("orientationchange"))}_.event.special.orientationchange={setup:function(){return!T.orientation_support&&(t=a(),i.on("throttledresize",h),!0)},teardown:function(){return!T.orientation_support&&(i.off("throttledresize",h),!0)},add:function(e){var t=e.handler;e.handler=function(e){return e.orientation=a(),t.apply(this,arguments)}}},_.event.special.orientationchange.orientation=a=function(){var e=document.documentElement;return(T.orientation_support?r[window.orientation]:e&&e.clientWidth/e.clientHeight<1.1)?"portrait":"landscape"},_.event.special.throttledresize={setup:function(){_(this).on("resize",f)},teardown:function(){_(this).off("resize",f)}};var c,u,l,f=function(){u=Date.now(),250<=(l=u-g)?(g=u,_(this).trigger("throttledresize")):(c&&window.clearTimeout(c),c=window.setTimeout(h,250-l))},g=0;function m(e,t,a,o){var n=a.type;a.type=t,_.event.dispatch.call(e,a,o),a.type=n}_.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap",taphold2:"taphold"},function(e,t){_.event.special[e]={setup:function(){_(this).on(t,_.noop)}}})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
