!function(n,i,e){var o="JSSocials",s=function(e,t){return i.isFunction(e)?e.apply(t,i.makeArray(arguments).slice(2)):e},r=/(\.(jpeg|png|gif|bmp|svg)$|^data:image\/(jpeg|png|gif|bmp|svg\+xml);base64)/i,t=/(&?[a-zA-Z0-9]+=)?\{([a-zA-Z0-9]+)\}/g,a={G:1e9,M:1e6,K:1e3},l={};function h(e,t){var s=i(e);s.data(o,this),this._$element=s,this.shares=[],this._init(t),this._render()}h.prototype={url:"",text:"",shareIn:"blank",showLabel:function(e){return!1===this.showCount?e>this.smallScreenWidth:e>=this.largeScreenWidth},showCount:function(e){return!(e<=this.smallScreenWidth)||"inside"},smallScreenWidth:640,largeScreenWidth:1024,resizeTimeout:200,elementClass:"jssocials",sharesClass:"jssocials-shares",shareClass:"jssocials-share",shareButtonClass:"jssocials-share-button",shareLinkClass:"jssocials-share-link",shareLogoClass:"jssocials-share-logo",shareLabelClass:"jssocials-share-label",shareLinkCountClass:"jssocials-share-link-count",shareCountBoxClass:"jssocials-share-count-box",shareCountClass:"jssocials-share-count",shareZeroCountClass:"jssocials-share-no-count",_init:function(e){this._initDefaults(),i.extend(this,e),this._initShares(),this._attachWindowResizeCallback()},_initDefaults:function(){this.url=n.location.href,this.text=i.trim(i("meta[name=description]").attr("content")||i("title").text())},_initShares:function(){this.shares=i.map(this.shares,i.proxy(function(e){"string"==typeof e&&(e={share:e});var t=e.share&&l[e.share];if(!t&&!e.renderer)throw Error("Share '"+e.share+"' is not found");return i.extend({url:this.url,text:this.text},t,e)},this))},_attachWindowResizeCallback:function(){i(n).on("resize",i.proxy(this._windowResizeHandler,this))},_detachWindowResizeCallback:function(){i(n).off("resize",this._windowResizeHandler)},_windowResizeHandler:function(){(i.isFunction(this.showLabel)||i.isFunction(this.showCount))&&(n.clearTimeout(this._resizeTimer),this._resizeTimer=setTimeout(i.proxy(this.refresh,this),this.resizeTimeout))},_render:function(){this._clear(),this._defineOptionsByScreen(),this._$element.addClass(this.elementClass),this._$shares=i("<div>").addClass(this.sharesClass).appendTo(this._$element),this._renderShares()},_defineOptionsByScreen:function(){this._screenWidth=i(n).width(),this._showLabel=s(this.showLabel,this,this._screenWidth),this._showCount=s(this.showCount,this,this._screenWidth)},_renderShares:function(){i.each(this.shares,i.proxy(function(e,t){this._renderShare(t)},this))},_renderShare:function(e){(i.isFunction(e.renderer)?i(e.renderer()):this._createShare(e)).addClass(this.shareClass).addClass(e.share?"jssocials-share-"+e.share:"").addClass(e.css).appendTo(this._$shares)},_createShare:function(e){var t=i("<div>"),s=this._createShareLink(e).appendTo(t);if(this._showCount){var r="inside"===this._showCount,a=r?s:i("<div>").addClass(this.shareCountBoxClass).appendTo(t);a.addClass(r?this.shareLinkCountClass:this.shareCountBoxClass),this._renderShareCount(e,a)}return t},_createShareLink:function(s){var r=this._getShareStrategy(s).call(s,{shareUrl:this._getShareUrl(s)});return r.addClass(this.shareLinkClass).append(this._createShareLogo(s)),this._showLabel&&r.append(this._createShareLabel(s)),i.each(this.on||{},function(e,t){i.isFunction(t)&&r.on(e,i.proxy(t,s))}),r},_getShareStrategy:function(e){var t=u[e.shareIn||this.shareIn];if(!t)throw Error("Share strategy '"+this.shareIn+"' not found");return t},_getShareUrl:function(e){var t=s(e.shareUrl,e);return this._formatShareUrl(t,e)},_createShareLogo:function(e){var t=e.logo,s=r.test(t)?i("<img>").attr("src",e.logo):i("<i>").addClass(t);return s.addClass(this.shareLogoClass),s},_createShareLabel:function(e){return i("<span>").addClass(this.shareLabelClass).text(e.label)},_renderShareCount:function(e,t){var s=i("<span>").addClass(this.shareCountClass);t.addClass(this.shareZeroCountClass).append(s),this._loadCount(e).done(i.proxy(function(e){e&&(t.removeClass(this.shareZeroCountClass),s.text(e))},this))},_loadCount:function(t){var s=i.Deferred(),e=this._getCountUrl(t);if(!e)return s.resolve(0).promise();var r=i.proxy(function(e){s.resolve(this._getCountValue(e,t))},this);return i.getJSON(e).done(r).fail(function(){i.get(e).done(r).fail(function(){s.resolve(0)})}),s.promise()},_getCountUrl:function(e){var t=s(e.countUrl,e);return this._formatShareUrl(t,e)},_getCountValue:function(e,t){var s=(i.isFunction(t.getCount)?t.getCount(e):e)||0;return"string"==typeof s?s:this._formatNumber(s)},_formatNumber:function(s){return i.each(a,function(e,t){if(t<=s)return s=parseFloat((s/t).toFixed(2))+e,!1}),s},_formatShareUrl:function(e,a){return e.replace(t,function(e,t,s){var r=a[s]||"";return r?(t||"")+n.encodeURIComponent(r):""})},_clear:function(){n.clearTimeout(this._resizeTimer),this._$element.empty()},_passOptionToShares:function(s,r){var a=this.shares;i.each(["url","text"],function(e,t){t===s&&i.each(a,function(e,t){t[s]=r})})},_normalizeShare:function(t){return i.isNumeric(t)?this.shares[t]:"string"==typeof t?i.grep(this.shares,function(e){return e.share===t})[0]:t},refresh:function(){this._render()},destroy:function(){this._clear(),this._detachWindowResizeCallback(),this._$element.removeClass(this.elementClass).removeData(o)},option:function(e,t){if(1===arguments.length)return this[e];this[e]=t,this._passOptionToShares(e,t),this.refresh()},shareOption:function(e,t,s){if(e=this._normalizeShare(e),2===arguments.length)return e[t];e[t]=s,this.refresh()}},i.fn.jsSocials=function(r){var a=i.makeArray(arguments).slice(1),n=this;return this.each(function(){var e,t=i(this),s=t.data(o);if(s)if("string"==typeof r){if(void 0!==(e=s[r].apply(s,a))&&e!==s)return n=e,!1}else s._detachWindowResizeCallback(),s._init(r),s._render();else new h(t,r)}),n};var u={popup:function(e){return i("<a>").attr("href","#").on("click",function(){return n.open(e.shareUrl,null,"width=600, height=400, location=0, menubar=0, resizeable=0, scrollbars=0, status=0, titlebar=0, toolbar=0"),!1})},blank:function(e){return i("<a>").attr({target:"_blank",href:e.shareUrl})},self:function(e){return i("<a>").attr({target:"_self",href:e.shareUrl})}};n.jsSocials={Socials:h,shares:l,shareStrategies:u,setDefaults:function(e){var t;i.isPlainObject(e)?t=h.prototype:(t=l[e],e=arguments[1]||{}),i.extend(t,e)}}}(window,jQuery),function(e,t,s,r){t.extend(s.shares,{email:{label:"E-mail",logo:"fa fa-at",shareUrl:"mailto:{to}?subject={text}&body={url}",countUrl:"",shareIn:"self"},twitter:{label:"Tweet",logo:"fa fa-twitter",shareUrl:"https://twitter.com/share?url={url}&text={text}&via={via}&hashtags={hashtags}",countUrl:""},facebook:{label:"Like",logo:"fa fa-facebook",shareUrl:"https://facebook.com/sharer/sharer.php?u={url}",countUrl:"https://graph.facebook.com/?id={url}",getCount:function(e){return e.share&&e.share.share_count||0}},vkontakte:{label:"Like",logo:"fa fa-vk",shareUrl:"https://vk.com/share.php?url={url}&title={title}&description={text}",countUrl:"https://vk.com/share.php?act=count&index=1&url={url}",getCount:function(e){return parseInt(e.slice(15,-2).split(", ")[1])}},googleplus:{label:"+1",logo:"fa fa-google",shareUrl:"https://plus.google.com/share?url={url}",countUrl:""},linkedin:{label:"Share",logo:"fa fa-linkedin",shareUrl:"https://www.linkedin.com/shareArticle?mini=true&url={url}",countUrl:"https://www.linkedin.com/countserv/count/share?format=jsonp&url={url}&callback=?",getCount:function(e){return e.count}},pinterest:{label:"Pin it",logo:"fa fa-pinterest",shareUrl:"https://pinterest.com/pin/create/bookmarklet/?media={media}&url={url}&description={text}",countUrl:"https://api.pinterest.com/v1/urls/count.json?&url={url}&callback=?",getCount:function(e){return e.count}},stumbleupon:{label:"Share",logo:"fa fa-stumbleupon",shareUrl:"http://www.stumbleupon.com/submit?url={url}&title={title}",countUrl:"https://cors-anywhere.herokuapp.com/https://www.stumbleupon.com/services/1.01/badge.getinfo?url={url}",getCount:function(e){return e.result&&e.result.views}},telegram:{label:"Telegram",logo:"fa fa-telegram",shareUrl:"tg://msg?text={url} {text}",countUrl:"",shareIn:"self"},whatsapp:{label:"WhatsApp",logo:"fa fa-whatsapp",shareUrl:"whatsapp://send?text={url} {text}",countUrl:"",shareIn:"self"},line:{label:"LINE",logo:"fa fa-comment",shareUrl:"http://line.me/R/msg/text/?{text} {url}",countUrl:""},viber:{label:"Viber",logo:"fa fa-volume-control-phone",shareUrl:"viber://forward?text={url} {text}",countUrl:"",shareIn:"self"},pocket:{label:"Pocket",logo:"fa fa-get-pocket",shareUrl:"https://getpocket.com/save?url={url}&title={title}",countUrl:""},messenger:{label:"Share",logo:"fa fa-commenting",shareUrl:"fb-messenger://share?link={url}",countUrl:"",shareIn:"self"},rss:{label:"RSS",logo:"fa fa-rss",shareUrl:"/feeds/",countUrl:"",shareIn:"blank"}})}(window,jQuery,window.jsSocials);
//# sourceMappingURL=data:application/json;base64,
